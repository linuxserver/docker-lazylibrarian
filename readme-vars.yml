project_name: lazylibrarian
project_url: "https://lazylibrarian.gitlab.io/"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/lazylibrarian-icon.png"
project_blurb: |
  [{{ project_name|capitalize }}]({{ project_url }}) is a program to follow authors and grab metadata for all your digital reading needs. It uses a combination of Goodreads Librarything and optionally GoogleBooks as sources for author info and book info.  This container is based on the DobyTang fork.
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"
project_categories: "Books"
# supported architectures
available_architectures:
  - {arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - {arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}
# container parameters
param_container_name: "{{ project_name }}"
param_usage_include_vols: true
param_volumes:
  - {vol_path: "/config", vol_host_path: "/path/to/{{ project_name }}/data", desc: "LazyLibrarian config"}
  - {vol_path: "/downloads", vol_host_path: "/path/to/downloads/", desc: "Download location"}
opt_param_usage_include_vols: true
opt_param_volumes:
  - {vol_path: "/books", vol_host_path: "/path/to/data/", desc: "Books location"}
param_usage_include_ports: true
param_ports:
  - {external_port: "5299", internal_port: "5299", port_desc: "The port for the LazyLibrarian webinterface"}
# optional container parameters
opt_param_usage_include_env: true
opt_param_env_vars:
  - {env_var: "DOCKER_MODS", env_value: "linuxserver/mods:universal-calibre|linuxserver/mods:lazylibrarian-ffmpeg", desc: "Allows additional functionality to be added, e.g. the Calibredb import program (optional, more info below)"}
# application setup block
app_setup_block_enabled: true
app_setup_block: |
  Access the webui at `http://<your-ip>:5299/home`, for more information check out [{{ project_name|capitalize }}]({{ project_url }}).

  We have set `/books` as optional path, this is because it is the easiest way to get started.

  ### Calibredb import

  **64bit only** We have implemented the optional ability to pull in the dependencies to enable the Calibredb import program:, this means if you don't require this feature the container isn't unnecessarily bloated but should you require it, it is easily available.
  This optional layer will be rebuilt automatically on our CI pipeline upon new Calibre releases so you can stay up to date.
  To use this option add the optional environmental variable as detailed in the docker-mods section to pull an addition docker layer to enable ebook conversion and then in the LazyLibrarian config page (Processing:Calibredb import program:) set the path to converter tool to `/usr/bin/calibredb`

  ### ffmpeg

  By adding `linuxserver/mods:lazylibrarian-ffmpeg` to your `DOCKER_MODS` environment variable you can install ffmpeg into your container on startup.
  This allows you to use the audiobook conversion features of LazyLibrarian.
  You can enable it in the Web UI under Settings > Processing > External Programs by setting the ffmpeg path to `ffmpeg`.
# init diagram
init_diagram: |
  "lazylibrarian:latest": {
    docker-mods
    base {
      fix-attr +\nlegacy cont-init
    }
    docker-mods -> base
    legacy-services
    custom services
    init-services -> legacy-services
    init-services -> custom services
    custom services -> legacy-services
    legacy-services -> ci-service-check
    init-migrations -> init-adduser
    init-os-end -> init-config
    init-config -> init-config-end
    init-crontab-config -> init-config-end
    init-lazylibrarian-config -> init-config-end
    init-config -> init-crontab-config
    init-mods-end -> init-custom-files
    base -> init-envfile
    init-config -> init-lazylibrarian-config
    base -> init-migrations
    init-config-end -> init-mods
    init-mods-package-install -> init-mods-end
    init-mods -> init-mods-package-install
    init-adduser -> init-os-end
    init-envfile -> init-os-end
    init-custom-files -> init-services
    init-services -> svc-cron
    svc-cron -> legacy-services
    init-services -> svc-lazylibrarian
    svc-lazylibrarian -> legacy-services
  }
  Base Images: {
    "baseimage-ubuntu:noble"
  }
  "lazylibrarian:latest" <- Base Images
# changelog
changelogs:
  - {date: "14.08.24:", desc: "Rebase to Ubuntu Noble."}
  - {date: "07.10.23:", desc: "Install unrar from [linuxserver repo](https://github.com/linuxserver/docker-unrar). Switch to Python virtual environment. Add Levenshtein."}
  - {date: "10.08.23:", desc: "Bump unrar to 6.2.10."}
  - {date: "01.07.23:", desc: "Deprecate armhf. As announced [here](https://www.linuxserver.io/blog/a-farewell-to-arm-hf)"}
  - {date: "07.12.22:", desc: "Rebase to Ubuntu Jammy, migrate to s6v3. Use pyproject.toml for deps. Build unrar from source."}
  - {date: "27.09.22:", desc: "Switch to `Levenshtein`, add cmake as build dep on armhf."}
  - {date: "07.05.22:", desc: "Rebase to Ubuntu Focal."}
  - {date: "22.05.21:", desc: "Make the paths clearer to the user, remove optional volume."}
  - {date: "17.05.21:", desc: "Add linuxserver wheel index."}
  - {date: "23.10.19:", desc: "Changed gitlab download link."}
  - {date: "23.10.19:", desc: "Add python module Pillow."}
  - {date: "31.07.19:", desc: "Add pyopenssl, remove git dependency during build time."}
  - {date: "09.07.19:", desc: "Rebase to Ubuntu Bionic, enables Calibre docker mod."}
  - {date: "28.06.19:", desc: "Rebasing to alpine 3.10."}
  - {date: "23.03.19:", desc: "Switching to new Base images, shift to arm32v7 tag."}
  - {date: "05.03.19:", desc: "Added apprise python package."}
  - {date: "22.02.19:", desc: "Rebasing to alpine 3.9."}
  - {date: "10.12.18:", desc: "Moved to Pipeline Building"}
  - {date: "16.08.18:", desc: "Rebase to alpine 3.8"}
  - {date: "05.01.18:", desc: "Deprecate cpu_core routine lack of scaling"}
  - {date: "12.12.17:", desc: "Rebase to alpine 3.7"}
  - {date: "21.07.17:", desc: "Internal git pull instead of at runtime"}
  - {date: "25.05.17:", desc: "Rebase to alpine 3.6"}
  - {date: "07.02.17:", desc: "Rebase to alpine 3.5"}
  - {date: "30.01.17:", desc: "Compile libunrar.so to allow reading of .cbr format files"}
  - {date: "12.01.17:", desc: "Add ghostscript package, allows magazine covers to be created etc"}
  - {date: "14.10.16:", desc: "Add version layer information"}
  - {date: "03.10.16:", desc: "Fix non-persistent settings and make log folder"}
  - {date: "28.09.16:", desc: "Inital Release"}
